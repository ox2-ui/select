// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders colored type 1`] = `
<Select
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "color": "#28af60",
        "label": "Published",
        "value": "published",
      },
      Object {
        "color": "#bf3a2b",
        "label": "Rejected",
        "value": "rejected",
      },
      Object {
        "color": "#f39c12",
        "label": "Pending",
        "value": "pending",
      },
    ]
  }
  placeholder="Filter by status"
  type="colored"
  value="published"
>
  <Styled(Select)
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "color": "#28af60",
          "label": "Published",
          "value": "published",
        },
        Object {
          "color": "#bf3a2b",
          "label": "Rejected",
          "value": "rejected",
        },
        Object {
          "color": "#f39c12",
          "label": "Pending",
          "value": "pending",
        },
      ]
    }
    placeholder="Filter by status"
    value="published"
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={false}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "color": "#28af60",
            "label": "Published",
            "value": "published",
          },
          Object {
            "color": "#bf3a2b",
            "label": "Rejected",
            "value": "rejected",
          },
          Object {
            "color": "#f39c12",
            "label": "Pending",
            "value": "pending",
          },
        ]
      }
      pageSize={5}
      placeholder="Filter by status"
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={false}
      tabSelectsValue={true}
      value="published"
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--single is-searchable has-value"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-4--value"
          >
            <Value
              disabled={false}
              id="react-select-4--value-item"
              instancePrefix="react-select-4-"
              onClick={null}
              value={
                Object {
                  "color": "#28af60",
                  "label": "Published",
                  "value": "published",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-4--value-item"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "color": "#28af60",
                          "fontSize": "16px",
                        }
                      }
                    >
                      Published
                    </div>
                  </div>
                </span>
              </div>
            </Value>
            <AutosizeInput
              aria-activedescendant="react-select-4--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-4--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            aria-label="Clear value"
            className="Select-clear-zone"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            title="Clear value"
          >
            <span
              className="Select-clear"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&times;",
                }
              }
            />
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;

exports[`renders colored-circle type 1`] = `
<Select
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "color": "#3598D8",
        "label": "Sessions",
        "value": "session",
      },
      Object {
        "color": "#2CAF65",
        "label": "Breaks",
        "value": "break",
      },
      Object {
        "color": "#F29C2F",
        "label": "Workshops",
        "value": "workshop",
      },
    ]
  }
  placeholder="Filter by category"
  type="colored-circle"
  value="session"
>
  <Styled(Select)
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "color": "#3598D8",
          "label": "Sessions",
          "value": "session",
        },
        Object {
          "color": "#2CAF65",
          "label": "Breaks",
          "value": "break",
        },
        Object {
          "color": "#F29C2F",
          "label": "Workshops",
          "value": "workshop",
        },
      ]
    }
    placeholder="Filter by category"
    value="session"
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={false}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "color": "#3598D8",
            "label": "Sessions",
            "value": "session",
          },
          Object {
            "color": "#2CAF65",
            "label": "Breaks",
            "value": "break",
          },
          Object {
            "color": "#F29C2F",
            "label": "Workshops",
            "value": "workshop",
          },
        ]
      }
      pageSize={5}
      placeholder="Filter by category"
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={false}
      tabSelectsValue={true}
      value="session"
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--single is-searchable has-value"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-5--value"
          >
            <Value
              disabled={false}
              id="react-select-5--value-item"
              instancePrefix="react-select-5-"
              onClick={null}
              value={
                Object {
                  "color": "#3598D8",
                  "label": "Sessions",
                  "value": "session",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-5--value-item"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "backgroundColor": "#3598D8",
                          "borderRadius": "50%",
                          "display": "inline-block",
                          "height": "10px",
                          "margin": "0 5px",
                          "width": "10px",
                        }
                      }
                    />
                    <div
                      style={
                        Object {
                          "fontSize": "16px",
                          "paddingLeft": "3px",
                        }
                      }
                    >
                      Sessions
                    </div>
                  </div>
                </span>
              </div>
            </Value>
            <AutosizeInput
              aria-activedescendant="react-select-5--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-5--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            aria-label="Clear value"
            className="Select-clear-zone"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            title="Clear value"
          >
            <span
              className="Select-clear"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&times;",
                }
              }
            />
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;

exports[`renders correctly 1`] = `
<Select
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "label": "Speakers",
        "value": "speakers",
      },
      Object {
        "label": "Attendies",
        "value": "attendies",
      },
      Object {
        "label": "Moderators",
        "value": "moderators",
      },
    ]
  }
>
  <Styled(Select)
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "label": "Speakers",
          "value": "speakers",
        },
        Object {
          "label": "Attendies",
          "value": "attendies",
        },
        Object {
          "label": "Moderators",
          "value": "moderators",
        },
      ]
    }
    value=""
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={false}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "label": "Speakers",
            "value": "speakers",
          },
          Object {
            "label": "Attendies",
            "value": "attendies",
          },
          Object {
            "label": "Moderators",
            "value": "moderators",
          },
        ]
      }
      pageSize={5}
      placeholder="Select..."
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={false}
      tabSelectsValue={true}
      value=""
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--single is-searchable"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-2--value"
          >
            <div
              className="Select-placeholder"
            >
              Select...
            </div>
            <AutosizeInput
              aria-activedescendant="react-select-2--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-2--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;

exports[`renders icon type 1`] = `
<Select
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "icon": "users2",
        "iconColor": "#3498DB",
        "label": "User",
        "value": "Tickets",
      },
      Object {
        "icon": "calendar-text",
        "iconColor": "#3498DB",
        "label": "Session",
        "value": "Sessions",
      },
      Object {
        "icon": "diamond4",
        "iconColor": "#3498DB",
        "label": "Sponsors & Exhibitors",
        "value": "Sponsors",
      },
      Object {
        "icon": "pencil3",
        "iconColor": "#3498DB",
        "label": "General",
        "value": "all",
      },
    ]
  }
  placeholder="Filter by note type"
  type="icon"
  value="Tickets"
>
  <Styled(Select)
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "icon": "users2",
          "iconColor": "#3498DB",
          "label": "User",
          "value": "Tickets",
        },
        Object {
          "icon": "calendar-text",
          "iconColor": "#3498DB",
          "label": "Session",
          "value": "Sessions",
        },
        Object {
          "icon": "diamond4",
          "iconColor": "#3498DB",
          "label": "Sponsors & Exhibitors",
          "value": "Sponsors",
        },
        Object {
          "icon": "pencil3",
          "iconColor": "#3498DB",
          "label": "General",
          "value": "all",
        },
      ]
    }
    placeholder="Filter by note type"
    value="Tickets"
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={false}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "icon": "users2",
            "iconColor": "#3498DB",
            "label": "User",
            "value": "Tickets",
          },
          Object {
            "icon": "calendar-text",
            "iconColor": "#3498DB",
            "label": "Session",
            "value": "Sessions",
          },
          Object {
            "icon": "diamond4",
            "iconColor": "#3498DB",
            "label": "Sponsors & Exhibitors",
            "value": "Sponsors",
          },
          Object {
            "icon": "pencil3",
            "iconColor": "#3498DB",
            "label": "General",
            "value": "all",
          },
        ]
      }
      pageSize={5}
      placeholder="Filter by note type"
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={false}
      tabSelectsValue={true}
      value="Tickets"
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--single is-searchable has-value"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-7--value"
          >
            <Value
              disabled={false}
              id="react-select-7--value-item"
              instancePrefix="react-select-7-"
              onClick={null}
              value={
                Object {
                  "icon": "users2",
                  "iconColor": "#3498DB",
                  "label": "User",
                  "value": "Tickets",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-7--value-item"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                      }
                    }
                  >
                    <Icon
                      color="#3498DB"
                      icon="users2"
                      size="18px"
                    >
                      <span
                        className="icon-users2"
                        style={
                          Object {
                            "color": "#3498DB",
                            "fontSize": "18px",
                          }
                        }
                      />
                    </Icon>
                    <div
                      style={
                        Object {
                          "fontSize": "16px",
                          "paddingLeft": "7px",
                        }
                      }
                    >
                      User
                    </div>
                  </div>
                </span>
              </div>
            </Value>
            <AutosizeInput
              aria-activedescendant="react-select-7--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-7--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            aria-label="Clear value"
            className="Select-clear-zone"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            title="Clear value"
          >
            <span
              className="Select-clear"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&times;",
                }
              }
            />
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;

exports[`renders image type 1`] = `
<Select
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "image": "http://imgur.com/N2LoYmv.png",
        "label": "Aci",
        "value": "id1",
      },
      Object {
        "image": "http://imgur.com/AN63ghL.png",
        "label": "NCS",
        "value": "id2",
      },
      Object {
        "image": "http://imgur.com/VMgTYTR.png",
        "label": "IPE",
        "value": "id3",
      },
    ]
  }
  placeholder="Select app"
  type="image"
  value="id2"
>
  <Styled(Select)
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "image": "http://imgur.com/N2LoYmv.png",
          "label": "Aci",
          "value": "id1",
        },
        Object {
          "image": "http://imgur.com/AN63ghL.png",
          "label": "NCS",
          "value": "id2",
        },
        Object {
          "image": "http://imgur.com/VMgTYTR.png",
          "label": "IPE",
          "value": "id3",
        },
      ]
    }
    placeholder="Select app"
    value="id2"
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={false}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "image": "http://imgur.com/N2LoYmv.png",
            "label": "Aci",
            "value": "id1",
          },
          Object {
            "image": "http://imgur.com/AN63ghL.png",
            "label": "NCS",
            "value": "id2",
          },
          Object {
            "image": "http://imgur.com/VMgTYTR.png",
            "label": "IPE",
            "value": "id3",
          },
        ]
      }
      pageSize={5}
      placeholder="Select app"
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={false}
      tabSelectsValue={true}
      value="id2"
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--single is-searchable has-value"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-6--value"
          >
            <Value
              disabled={false}
              id="react-select-6--value-item"
              instancePrefix="react-select-6-"
              onClick={null}
              value={
                Object {
                  "image": "http://imgur.com/AN63ghL.png",
                  "label": "NCS",
                  "value": "id2",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-6--value-item"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                      }
                    }
                  >
                    <Thumb
                      height={20}
                      image="http://imgur.com/AN63ghL.png"
                      width={20}
                    >
                      <div
                        className="display:flex flex:items-center flex:content-center border:rounded color:transparent"
                        style={
                          Object {
                            "WebkitFlex": "0 0 20px",
                            "flex": "0 0 20px",
                            "height": "20px",
                            "width": "20px",
                          }
                        }
                      >
                        <img
                          className="w:100p border:rounded"
                          src="http://imgur.com/AN63ghL.png"
                        />
                      </div>
                    </Thumb>
                    <div
                      style={
                        Object {
                          "fontSize": "16px",
                          "paddingLeft": "7px",
                        }
                      }
                    >
                      NCS
                    </div>
                  </div>
                </span>
              </div>
            </Value>
            <AutosizeInput
              aria-activedescendant="react-select-6--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-6--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            aria-label="Clear value"
            className="Select-clear-zone"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            title="Clear value"
          >
            <span
              className="Select-clear"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&times;",
                }
              }
            />
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;

exports[`renders multi selected 1`] = `
<Select
  multi={true}
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "label": "welcome",
        "value": "welcome",
      },
      Object {
        "label": "announcement",
        "value": "announcement",
      },
      Object {
        "label": "warning",
        "value": "warning",
      },
      Object {
        "label": "important",
        "value": "important",
      },
      Object {
        "label": "reminder",
        "value": "reminder",
      },
      Object {
        "label": "other",
        "value": "other",
      },
    ]
  }
  simpleValue={true}
  value={
    Array [
      "important",
      "warning",
    ]
  }
>
  <Styled(Select)
    multi={true}
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "label": "welcome",
          "value": "welcome",
        },
        Object {
          "label": "announcement",
          "value": "announcement",
        },
        Object {
          "label": "warning",
          "value": "warning",
        },
        Object {
          "label": "important",
          "value": "important",
        },
        Object {
          "label": "reminder",
          "value": "reminder",
        },
        Object {
          "label": "other",
          "value": "other",
        },
      ]
    }
    simpleValue={true}
    value={
      Array [
        "important",
        "warning",
      ]
    }
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={true}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "label": "welcome",
            "value": "welcome",
          },
          Object {
            "label": "announcement",
            "value": "announcement",
          },
          Object {
            "label": "warning",
            "value": "warning",
          },
          Object {
            "label": "important",
            "value": "important",
          },
          Object {
            "label": "reminder",
            "value": "reminder",
          },
          Object {
            "label": "other",
            "value": "other",
          },
        ]
      }
      pageSize={5}
      placeholder="Select..."
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={true}
      tabSelectsValue={true}
      value={
        Array [
          "important",
          "warning",
        ]
      }
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--multi is-searchable has-value"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-3--value"
          >
            <Value
              disabled={false}
              id="react-select-3--value-0"
              instancePrefix="react-select-3-"
              onClick={null}
              onRemove={[Function]}
              value={
                Object {
                  "label": "important",
                  "value": "important",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-hidden="true"
                  className="Select-value-icon"
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                >
                  ×
                </span>
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-3--value-0"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "fontSize": "16px",
                        }
                      }
                    >
                      important
                    </div>
                  </div>
                  <span
                    className="Select-aria-only"
                  >
                     
                  </span>
                </span>
              </div>
            </Value>
            <Value
              disabled={false}
              id="react-select-3--value-1"
              instancePrefix="react-select-3-"
              onClick={null}
              onRemove={[Function]}
              value={
                Object {
                  "label": "warning",
                  "value": "warning",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-hidden="true"
                  className="Select-value-icon"
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                >
                  ×
                </span>
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-3--value-1"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "fontSize": "16px",
                        }
                      }
                    >
                      warning
                    </div>
                  </div>
                  <span
                    className="Select-aria-only"
                  >
                     
                  </span>
                </span>
              </div>
            </Value>
            <AutosizeInput
              aria-activedescendant="react-select-3--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-3--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            aria-label="Clear all"
            className="Select-clear-zone"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            title="Clear all"
          >
            <span
              className="Select-clear"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&times;",
                }
              }
            />
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;

exports[`renders value-styled type 1`] = `
<Select
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "label": "None",
        "value": "none",
      },
      Object {
        "label": "Capitalize",
        "value": "capitalize",
      },
      Object {
        "label": "Uppercase",
        "value": "uppercase",
      },
      Object {
        "label": "Lowercase",
        "value": "lowercase",
      },
    ]
  }
  placeholder="Text transform"
  styledProperty="textTransform"
  type="value-styled"
  value="uppercase"
>
  <Styled(Select)
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "label": "None",
          "value": "none",
        },
        Object {
          "label": "Capitalize",
          "value": "capitalize",
        },
        Object {
          "label": "Uppercase",
          "value": "uppercase",
        },
        Object {
          "label": "Lowercase",
          "value": "lowercase",
        },
      ]
    }
    placeholder="Text transform"
    styledProperty="textTransform"
    value="uppercase"
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={false}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "label": "None",
            "value": "none",
          },
          Object {
            "label": "Capitalize",
            "value": "capitalize",
          },
          Object {
            "label": "Uppercase",
            "value": "uppercase",
          },
          Object {
            "label": "Lowercase",
            "value": "lowercase",
          },
        ]
      }
      pageSize={5}
      placeholder="Text transform"
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={false}
      styledProperty="textTransform"
      tabSelectsValue={true}
      value="uppercase"
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--single is-searchable has-value"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-8--value"
          >
            <Value
              disabled={false}
              id="react-select-8--value-item"
              instancePrefix="react-select-8-"
              onClick={null}
              value={
                Object {
                  "label": "Uppercase",
                  "value": "uppercase",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-8--value-item"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "fontSize": "16px",
                          "textTransform": "uppercase",
                        }
                      }
                    >
                      Uppercase
                    </div>
                  </div>
                </span>
              </div>
            </Value>
            <AutosizeInput
              aria-activedescendant="react-select-8--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-8--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            aria-label="Clear value"
            className="Select-clear-zone"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            title="Clear value"
          >
            <span
              className="Select-clear"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&times;",
                }
              }
            />
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;

exports[`renders with custom item styles 1`] = `
<Select
  itemStyle={
    Object {
      "fontFamily": "Roboto",
    }
  }
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "label": "Light",
        "value": "300",
      },
      Object {
        "label": "Regular",
        "value": "400",
      },
      Object {
        "label": "Bold",
        "value": "700",
      },
    ]
  }
  placeholder="Weight"
  styledProperty="fontWeight"
  type="value-styled"
  value="700"
>
  <Styled(Select)
    itemStyle={
      Object {
        "fontFamily": "Roboto",
      }
    }
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "label": "Light",
          "value": "300",
        },
        Object {
          "label": "Regular",
          "value": "400",
        },
        Object {
          "label": "Bold",
          "value": "700",
        },
      ]
    }
    placeholder="Weight"
    styledProperty="fontWeight"
    value="700"
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      itemStyle={
        Object {
          "fontFamily": "Roboto",
        }
      }
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={false}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "label": "Light",
            "value": "300",
          },
          Object {
            "label": "Regular",
            "value": "400",
          },
          Object {
            "label": "Bold",
            "value": "700",
          },
        ]
      }
      pageSize={5}
      placeholder="Weight"
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={false}
      styledProperty="fontWeight"
      tabSelectsValue={true}
      value="700"
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--single is-searchable has-value"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-10--value"
          >
            <Value
              disabled={false}
              id="react-select-10--value-item"
              instancePrefix="react-select-10-"
              onClick={null}
              value={
                Object {
                  "label": "Bold",
                  "value": "700",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-10--value-item"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                        "fontFamily": "Roboto",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "fontSize": "16px",
                          "fontWeight": "700",
                        }
                      }
                    >
                      Bold
                    </div>
                  </div>
                </span>
              </div>
            </Value>
            <AutosizeInput
              aria-activedescendant="react-select-10--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-10--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            aria-label="Clear value"
            className="Select-clear-zone"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            title="Clear value"
          >
            <span
              className="Select-clear"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&times;",
                }
              }
            />
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;

exports[`renders with fallback icon 1`] = `
<Select
  fallbackIcon="user"
  fallbackIconBg="neutral"
  fallbackIconColor="white"
  onUpdate={[Function]}
  options={
    Array [
      Object {
        "image": "https://randomuser.me/api/portraits/women/50.jpg",
        "label": "Jane Sanders",
        "value": "id1",
      },
      Object {
        "image": "https://randomuser.me/api/portraits/women/18.jpg",
        "label": "Linda Garland",
        "value": "id2",
      },
      Object {
        "image": "https://randomuser.me/api/portraits/women/50.jpg",
        "label": "Jane Offline",
        "localImg": "ktLb8Hqxo28WdToq5.jpg",
        "value": "id1",
      },
      Object {
        "image": "",
        "label": "No image",
        "value": "id3",
      },
    ]
  }
  placeholder="Select person"
  type="image"
  value="id3"
>
  <Styled(Select)
    fallbackIcon="user"
    fallbackIconBg="neutral"
    fallbackIconColor="white"
    onChange={[Function]}
    onUpdate={[Function]}
    optionRenderer={[Function]}
    options={
      Array [
        Object {
          "image": "https://randomuser.me/api/portraits/women/50.jpg",
          "label": "Jane Sanders",
          "value": "id1",
        },
        Object {
          "image": "https://randomuser.me/api/portraits/women/18.jpg",
          "label": "Linda Garland",
          "value": "id2",
        },
        Object {
          "image": "https://randomuser.me/api/portraits/women/50.jpg",
          "label": "Jane Offline",
          "localImg": "ktLb8Hqxo28WdToq5.jpg",
          "value": "id1",
        },
        Object {
          "image": "",
          "label": "No image",
          "value": "id3",
        },
      ]
    }
    placeholder="Select person"
    value="id3"
    valueRenderer={[Function]}
  >
    <Select
      addLabelText="Add \\"{label}\\"?"
      arrowRenderer={[Function]}
      autosize={true}
      backspaceRemoves={true}
      backspaceToRemoveMessage="Press backspace to remove {label}"
      className="fUPKPg"
      clearAllText="Clear all"
      clearRenderer={[Function]}
      clearValueText="Clear value"
      clearable={true}
      deleteRemoves={true}
      delimiter=","
      disabled={false}
      escapeClearsValue={true}
      fallbackIcon="user"
      fallbackIconBg="neutral"
      fallbackIconColor="white"
      filterOptions={[Function]}
      ignoreAccents={true}
      ignoreCase={true}
      inputProps={Object {}}
      isLoading={false}
      joinValues={false}
      labelKey="label"
      matchPos="any"
      matchProp="any"
      menuBuffer={0}
      menuRenderer={[Function]}
      multi={false}
      noResultsText="No results found"
      onBlurResetsInput={true}
      onChange={[Function]}
      onCloseResetsInput={true}
      onUpdate={[Function]}
      openAfterFocus={false}
      optionComponent={[Function]}
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "image": "https://randomuser.me/api/portraits/women/50.jpg",
            "label": "Jane Sanders",
            "value": "id1",
          },
          Object {
            "image": "https://randomuser.me/api/portraits/women/18.jpg",
            "label": "Linda Garland",
            "value": "id2",
          },
          Object {
            "image": "https://randomuser.me/api/portraits/women/50.jpg",
            "label": "Jane Offline",
            "localImg": "ktLb8Hqxo28WdToq5.jpg",
            "value": "id1",
          },
          Object {
            "image": "",
            "label": "No image",
            "value": "id3",
          },
        ]
      }
      pageSize={5}
      placeholder="Select person"
      required={false}
      scrollMenuIntoView={true}
      searchable={true}
      simpleValue={false}
      tabSelectsValue={true}
      value="id3"
      valueComponent={[Function]}
      valueKey="value"
      valueRenderer={[Function]}
    >
      <div
        className="Select fUPKPg Select--single is-searchable has-value"
      >
        <div
          className="Select-control"
          onKeyDown={[Function]}
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
        >
          <span
            className="Select-multi-value-wrapper"
            id="react-select-9--value"
          >
            <Value
              disabled={false}
              id="react-select-9--value-item"
              instancePrefix="react-select-9-"
              onClick={null}
              value={
                Object {
                  "image": "",
                  "label": "No image",
                  "value": "id3",
                }
              }
            >
              <div
                className="Select-value"
              >
                <span
                  aria-selected="true"
                  className="Select-value-label"
                  id="react-select-9--value-item"
                  role="option"
                >
                  <div
                    style={
                      Object {
                        "alignItems": "center",
                        "display": "inline-flex",
                      }
                    }
                  >
                    <Thumb
                      color="neutral"
                      height={20}
                      icon="user"
                      iconColor="white"
                      image=""
                      width={20}
                    >
                      <div
                        className="display:flex flex:items-center flex:content-center border:rounded color:neutral"
                        style={
                          Object {
                            "WebkitFlex": "0 0 20px",
                            "flex": "0 0 20px",
                            "height": "20px",
                            "width": "20px",
                          }
                        }
                      >
                        <Icon
                          className="text-color:white"
                          icon="user"
                          size="14px"
                        >
                          <span
                            className="icon-user text-color:white"
                            style={
                              Object {
                                "color": undefined,
                                "fontSize": "14px",
                              }
                            }
                          />
                        </Icon>
                      </div>
                    </Thumb>
                    <div
                      style={
                        Object {
                          "fontSize": "16px",
                          "paddingLeft": "7px",
                        }
                      }
                    >
                      No image
                    </div>
                  </div>
                </span>
              </div>
            </Value>
            <AutosizeInput
              aria-activedescendant="react-select-9--value"
              aria-expanded="false"
              aria-haspopup="false"
              aria-owns=""
              className="Select-input"
              minWidth="5"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              role="combobox"
              value=""
            >
              <div
                className="Select-input"
                style={
                  Object {
                    "display": "inline-block",
                  }
                }
              >
                <input
                  aria-activedescendant="react-select-9--value"
                  aria-expanded="false"
                  aria-haspopup="false"
                  aria-owns=""
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  role="combobox"
                  style={
                    Object {
                      "boxSizing": "content-box",
                      "width": "5px",
                    }
                  }
                  value=""
                />
                <div
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "scroll",
                      "position": "absolute",
                      "top": 0,
                      "visibility": "hidden",
                      "whiteSpace": "pre",
                    }
                  }
                />
              </div>
            </AutosizeInput>
          </span>
          <span
            aria-label="Clear value"
            className="Select-clear-zone"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            title="Clear value"
          >
            <span
              className="Select-clear"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&times;",
                }
              }
            />
          </span>
          <span
            className="Select-arrow-zone"
            onMouseDown={[Function]}
          >
            <span
              className="Select-arrow"
              onMouseDown={[Function]}
            />
          </span>
        </div>
      </div>
    </Select>
  </Styled(Select)>
</Select>
`;
